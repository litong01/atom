---
apiVersion: v1
kind: Namespace
metadata:
  name: pcloud
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  annotations:
    meta.helm.sh/release-name: traefik-ingressroutes
    meta.helm.sh/release-namespace: pcloud
  labels:
    app.kubernetes.io/managed-by: Helm
  name: grafana-prefixstrip
  namespace: pcloud
spec:
  stripPrefix:
    forceSlash: false
    prefixes:
    - /grafana
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  annotations:
    meta.helm.sh/release-name: traefik-ingressroutes
    meta.helm.sh/release-namespace: pcloud
  labels:
    app.kubernetes.io/managed-by: Helm
  name: grafana-host-header
  namespace: pcloud
spec:
  headers:
    customRequestHeaders:
      Host: grafana.pcloud.svc
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    meta.helm.sh/release-name: traefik-ingressroutes
    meta.helm.sh/release-namespace: pcloud
  labels:
    app.kubernetes.io/managed-by: Helm
  name: grafanaroutetls
  namespace: pcloud
spec:
  entryPoints:
  - web
  - websecure
  routes:
  - kind: Rule
    match: Host(`integration.astra.netapp.io`) &&  PathPrefix(`/grafana`)
    middlewares:
    - name: secured
    - name: grafana-prefixstrip
    - name: grafana-host-header
    services:
    - name: grafana
      namespace: pcloud
      passHostHeader: true
      port: 3000
  tls:
    secretName: secure-testing-cert
---
# Source: grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "9.4.3"
    app.kubernetes.io/managed-by: Helm
  name: grafana
  namespace: pcloud
---
# Source: grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana
  namespace: pcloud
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "9.4.3"
    app.kubernetes.io/managed-by: Helm
data:
  allow-snippet-annotations: "false"
  grafana.ini: |
    [analytics]
    check_for_updates = false
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [server]
    domain = integration.astra.netapp.io
    root_url = https://integration.astra.netapp.io/grafana/
    serve_from_sub_path = true
    [database]
    locking_attempt_timeout_sec = 3
    query_retries = 3

  datasources.yaml: |
    apiVersion: 1
    datasources:
    - access: proxy
      editable: true
      isDefault: true
      orgId: 1
      jsonData:
        httpMethod: POST
        timeInterval: 5s
      name: Prometheus
      type: prometheus
      url: http://prometheus:9090/

  dashboardproviders.yaml: |
    apiVersion: 1
    providers:
    - disableDeletion: false
      folder: acs
      name: acs
      options:
        path: /var/lib/grafana/dashboards/acs
      orgId: 1
      type: file
---
# Source: grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: pcloud
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "9.4.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafanadata
  namespace: pcloud
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
# Source: grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: pcloud
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "9.4.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: grafana
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: grafana
        app: grafana
    spec:
      serviceAccountName: grafana
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "grafana/grafana:9.4.3"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
            - name: dashboards-acs
              mountPath: "/var/lib/grafana/dashboards/acs"
            - name: config
              mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
              subPath: "datasources.yaml"
            - name: config
              mountPath: "/etc/grafana/provisioning/dashboards/dashboardproviders.yaml"
              subPath: "dashboardproviders.yaml"
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
            - name: "GF_AUTH_ANONYMOUS_ENABLED"
              value: "true"
            - name: "GF_AUTH_ANONYMOUS_ORG_ROLE"
              value: "Admin"
            - name: "GF_AUTH_BASIC_ENABLED"
              value: "false"
            - name: "GF_SECURITY_ADMIN_PASSWORD"
              value: "-"
            - name: "GF_SECURITY_ADMIN_USER"
              value: "-"
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: grafana          
        - name: dashboards-acs
          configMap:
            name: acs-grafana-dashboards
        - name: storage
          persistentVolumeClaim:
            claimName: grafanadata
