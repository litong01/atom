#!/bin/bash
# handling the auth2.json mounting
pcloud2mount=""
pcloud2env=""
if [[ ! -z ${PCLOUD_AUTH2} ]]; then
  pcloud2mount="-v ${PCLOUD_AUTH2}:/home/work/auth2.json"
  pcloud2env="-e PCLOUD_AUTH2=/home/work/auth2.json"
fi
# Run the tool
docker run -it --rm --name astra --network host ${pcloud2env} \
   -e "SKIP_KUBE_CONTEXT_CHECK=true" \
   -e "DEPLOY_TYPE=dev" \
   -e "WORKDIR=/home/work/astra" \
   -e "HOSTWORKDIR=/tmp/astra" \
   -e "VAULT_ADDR=${VAULT_ADDR}" \
   -e "GITHUB_USERNAME=${GITHUB_USERNAME}" \
   -e "GITHUB_TOKEN=${GITHUB_TOKEN}" \
   -e "GITHUB_ID=${GITHUB_ID}" \
   -e "DH_ID=${DH_ID}" \
   -e "DH_TOKEN=${DH_TOKEN}" \
   -e "CREDS_AUTH_CLIENT_ID=${CREDS_AUTH_CLIENT_ID}" \
   -e "CREDS_AUTH_DOMAIN=${CREDS_AUTH_DOMAIN}" \
   -e "CREDS_ISSUER_URL=${CREDS_ISSUER_URL}" \
   -e "CREDS_IMAGE_USERNAME=${CREDS_IMAGE_USERNAME}" \
   -e "CREDS_IMAGE_PASSWORD=${CREDS_IMAGE_PASSWORD}" \
   -e "IMAGE_HOST=${IMAGE_HOST}" \
   -e "CLUSTER_ENDPOINT=${CLUSTER_ENDPOINT}" \
   -v /var/run/docker.sock:/var/run/docker.sock ${pcloud2mount} \
   -v /tmp/astra:/home/work/astra \
   -v $(pwd):/home/polaris -v ${HOME}/.kube:/home/.kube \
   ghcr.io/netapp-polaris/polaris/astra/astradt:v0.1.0 time astra $@
